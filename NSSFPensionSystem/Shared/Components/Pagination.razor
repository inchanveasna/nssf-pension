<div class="d-flex justify-content-between">
    <div class="paginating-container pagination-solid">
        <label>បង្ហាញ</label>
        @*<select class="form-control" @onchange="((val)=> OnPageSizeChange(val))" value="Paginate.Size">
            <option value="10">10</option>
            <option value="20">20</option>
            <option value="50">50</option>
            <option value="100">100</option>
        </select>*@
        <input type="text" class="form-control mx-1" value="@Paginate.Size" @onchange="((val)=> OnPageSizeChange(val))" style="width: 80px" />
        <label>សរុប: @(Paginate.Total.HasValue ? Paginate.Total.Value.ToString("N0") : "0" )</label>
    </div>

    <div class="paginating-container pagination-solid">
        <ul class="pagination">
            <li class="prev"><a @onclick="OnFirst"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevrons-left"><polyline points="11 17 6 12 11 7"></polyline><polyline points="18 17 13 12 18 7"></polyline></svg></a></li>
            <li class="next"><a @onclick="OnPrev"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-left"><polyline points="15 18 9 12 15 6"></polyline></svg></a></li>
        </ul>
        <input type="text" class="form-control mx-1" value="@Paginate.Page" @onchange="@((val) => OnPageChange(val))" style="width: 80px" />
        <label>/</label>
        <input type="text" class="form-control mx-1" disabled style="width: 80px" value="@(Paginate.TotalPages.HasValue ? Paginate.TotalPages.Value.ToString("N0") : "0")"  />
        <ul class="pagination">
            <li class="next"><a @onclick="OnNext"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevron-right"><polyline points="9 18 15 12 9 6"></polyline></svg></a></li>
            <li class="next"><a @onclick="OnLast"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="feather feather-chevrons-right"><polyline points="13 17 18 12 13 7"></polyline><polyline points="6 17 11 12 6 7"></polyline></svg></a></li>
        </ul>
    </div>
</div>



@code {

    [Parameter]
    public PaginationModel Paginate { get; set; } = new PaginationModel();

    [Parameter]
    public EventCallback<PaginationModel> OnChangedPage { get; set; }

    public void OnPageSizeChange(ChangeEventArgs val)
    {
        int size = 0;
        if(Int32.TryParse(val.Value.ToString(), out size) && size > 0)
        {
            Paginate.Size = size;
            OnChangedPage.InvokeAsync(Paginate);
        }
    }


    public void OnPageChange(ChangeEventArgs val)
    {
        int page = 0;
        if(Int32.TryParse(val.Value.ToString(), out page) && page !> Paginate.TotalPages)
        {
            Paginate.Page = page;
            OnChangedPage.InvokeAsync(Paginate);
        }
    }

    public void OnNext()
    {
        if (Paginate.Page + 1 > Paginate.TotalPages) return;
        Paginate.Page += 1;
        OnChangedPage.InvokeAsync(Paginate);
    }

    public void OnPrev()
    {
        if (Paginate.Page - 1 == 0) return;
        Paginate.Page -= 1;
        OnChangedPage.InvokeAsync(Paginate);
    }

    public void OnFirst()
    {
        if (Paginate.Page == 1) return;
        Paginate.Page = 1;
        OnChangedPage.InvokeAsync(Paginate);
        StateHasChanged();
    }


    public void OnLast()
    {
        if (Paginate.Page == Paginate.TotalPages) return;
        Paginate.Page = Paginate.TotalPages;
        OnChangedPage.InvokeAsync(Paginate);
        StateHasChanged();
    }

}
