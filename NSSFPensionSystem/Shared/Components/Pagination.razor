<div class="d-flex justify-content-between ">

    <div class="form-row">
        <label class="d-flex align-items-center" style="margin-bottom: 0rem !important">បង្ហាញ</label>
        <input type="text" class="form-control mx-1" value="@Paginate.Size" @onchange="((val)=> OnPageSizeChange(val))" style="width: 80px" />
        <label class="d-flex align-items-center" style="margin-bottom: 0rem !important">សរុប: @(Paginate.Total.HasValue ? Paginate.Total.Value.ToString("N0") : "0" )</label>
    </div>


    <div class="form-row d-flex align-items-center">
        <button type="button" class="btn btn-outline-info btn-sm" @onclick="OnFirst"> <i class="fa-solid fa-angles-left"></i> </button>
        <button type="button" class="btn btn-outline-info btn-sm ml-1" @onclick="OnPrev"> <i class="fa-solid fa-angle-left"></i> </button>

        <input type="text" class="form-control mx-1" value="@Paginate.Page" @onchange="@((val) => OnPageChange(val))" style="width: 80px" />
        <label class="d-flex align-items-center" style="margin-bottom: 0rem !important">/</label>
        <input type="text" class="form-control mx-1" disabled style="width: 80px" value="@(Paginate.TotalPages.HasValue ? Paginate.TotalPages.Value.ToString("N0") : "0")" />

        <button type="button" class="btn btn-outline-info btn-sm ml-1" @onclick="OnNext"> <i class="fa-solid fa-angle-right"></i> </button>
        <button type="button" class="btn btn-outline-info btn-sm ml-1" @onclick="OnLast"> <i class="fa-solid fa-angles-right"></i> </button>
    </div>
</div>



@code {

    [Parameter] public PaginationModel Paginate { get; set; } = new PaginationModel();

    [Parameter] public EventCallback<PaginationModel> OnChangedPage { get; set; }

    public void OnPageSizeChange(ChangeEventArgs val)
    {
        int size = 0;
        if (Int32.TryParse(val.Value.ToString(), out size) && size > 0)
        {
            Paginate.Size = size;
            OnChangedPage.InvokeAsync(Paginate);
        }
    }


    public void OnPageChange(ChangeEventArgs val)
    {
        int page = 0;
        if (Int32.TryParse(val.Value.ToString(), out page) && page! > Paginate.TotalPages)
        {
            Paginate.Page = page;
            OnChangedPage.InvokeAsync(Paginate);
        }
    }

    public void OnNext()
    {
        if (Paginate.Page + 1 > Paginate.TotalPages) return;
        Paginate.Page += 1;
        OnChangedPage.InvokeAsync(Paginate);
    }

    public void OnPrev()
    {
        if (Paginate.Page - 1 == 0) return;
        Paginate.Page -= 1;
        OnChangedPage.InvokeAsync(Paginate);
    }

    public void OnFirst()
    {
        if (Paginate.Page == 1) return;
        Paginate.Page = 1;
        OnChangedPage.InvokeAsync(Paginate);
        StateHasChanged();
    }


    public void OnLast()
    {
        if (Paginate.Page == Paginate.TotalPages) return;
        Paginate.Page = Paginate.TotalPages;
        OnChangedPage.InvokeAsync(Paginate);
        StateHasChanged();
    }

}
