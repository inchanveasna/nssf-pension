@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JS
@inject ILayoutManager layoutManager
@inject NavBarLeftInjectableMenu navBarLeftInjectableMenu
<NavBar>
    <NavBarLeft>
        @navBarLeftInjectableMenu.content <!-- Injectable for custom menu content per page -->
    </NavBarLeft>

    <AuthorizeView>
        <Authorized>
            @{
                if (context.User.Identity.IsAuthenticated)
                {
                    var claim = context.User.Claims.ToList();

                    UserModel userLogin = new UserModel()
                    {
                        Name = claim.Where(w => w.Type == "name").FirstOrDefault()?.Value,
                        EmpId = Convert.ToInt32(claim.Where(w => w.Type == "emp_id").FirstOrDefault()?.Value),
                        Username = claim.Where(w => w.Type == "preferred_username").FirstOrDefault()?.Value,
                        Picture = claim.Where(w => w.Type == "picture").FirstOrDefault()?.Value,
                        AccessToken = claim.Where(w => w.Type == "access_token").FirstOrDefault()?.Value
                    };

                    this.LoginComplete(userLogin);

                }
            }
            <ul class="navbar-nav ml-auto">
                <li class="nav-item dropdown">
                    <a class="nav-link" data-toggle="dropdown" href="#">
                        <i class="fa-solid fa-circle-user"></i>
                        @(UserService.Current.EmpNameFirstKhmer + " " + UserService.Current.EmpNameLastKhmer)
                        @*<span class="badge badge-danger navbar-badge"></span>*@
                    </a>
                    <div class="dropdown-menu dropdown-menu-lg dropdown-menu-right">
                        <span class="dropdown-item dropdown-header">អ្នកប្រើប្រាស់</span>
                        <div class="dropdown-divider"></div>
                        <a href="#" class="dropdown-item">
                            <i class="fa-solid fa-key"></i> ប្ដូរលេខសំងាត់
                        </a>
                        <div class="dropdown-divider"></div>
                        <a href="#" @onclick="BeginSignOut" class="dropdown-item dropdown-logout text-danger">
                            <i class="fa-solid fa-arrow-right-from-bracket"></i> ចាកចេញ
                        </a>
                    </div>
                </li>

                <li class="nav-item">
                    <a class="nav-link" data-widget="fullscreen" href="#" role="button">
                        <i class="fas fa-expand-arrows-alt"></i>
                    </a>
                </li>
            </ul>
        </Authorized>
        <NotAuthorized>
            <NavBarRight>
                <button class="btn btn-default btn-sm">
                    <i class="fa-solid fa-right-from-bracket"></i> ចូលប្រើប្រាស់
                </button>
            </NavBarRight>
            <RedirectToLogin />
        </NotAuthorized>
    </AuthorizeView>
</NavBar>
<SideBarContainer>
    <BrandLogo Link="#" Logo="img/logonssf.png">ប្រព័ន្ធសោធន</BrandLogo>
    <AuthorizeView>
        <Authorized>
            <SideBar>
                <SideBarMenu>
                    @if (UserService.Current.Menus != null)
                    {
                        @foreach (var menu in UserService.Current.Menus)
                        {
                            @if (menu.subMenu.Count == 0)
                            {
                                <SideBarMenuItem Link="@menu.menu_link" Icon="@menu.menu_icon">
                                    @menu.menu_name
                                </SideBarMenuItem>
                            }
                            else
                            {
                                <SideBarTreeView Icon="@menu.menu_icon">
                                    <Title>@menu.menu_name</Title>

                                    <Items>
                                        @foreach (var subMenu in menu.subMenu)
                                        {
                                            <SideBarMenuItem Icon="@subMenu.menu_icon" Link="@subMenu.menu_link">
                                                @subMenu.menu_name
                                            </SideBarMenuItem>
                                        }
                                    </Items>
                                </SideBarTreeView>
                            }
                        }
                    }
                </SideBarMenu>
            </SideBar>
        </Authorized>
    </AuthorizeView>
</SideBarContainer>
<ContentWrapper>
    @Body
</ContentWrapper>





@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject IUserService userService
@inject SignOutSessionStateManager SignOutManager

@code {

    protected override void OnParametersSet()
    {
        // content = null; for refreshing custom menu injectables per page.
        // no override; reset default to show parent menu content items.
        navBarLeftInjectableMenu.SetContent(null, false);
    }

    private async void LoginComplete(UserModel user)
    {
        if (UserService.Current.EmpId == 0)
        {
            UserService.Current = await userService.Get(user.EmpId);
            StateHasChanged();
        }
    }

    private DateTime dt = DateTime.Now;



    protected override void OnAfterRender(bool isFirstRender)
    {
        layoutManager.IsFooterFixed = true;
        layoutManager.IsNavBarFixed = true;
        layoutManager.IsSideBarFixed = true;
        base.OnAfterRender(isFirstRender);
    }

    private async Task BeginSignOut(MouseEventArgs args)
    {
        await SignOutManager.SetSignOutState();
        NavigationManager.NavigateTo("authentication/logout");
    }
}